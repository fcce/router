server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;

    #access_log  logs/host.access.log  main;

    location /raw_access_test{
        echo hello;
    }

    location  ~ ^/(\w*)(.*) {
        resolver 10.237.148.54;
        # proxy_set_header Host $host;
        # proxy_set_header X-Real-IP $remote_addr;

        # proxy_pass http://edaixi/nlgroups/;

        set $target '';
        set $model_name $1;
        set $rest_path $2;

        access_by_lua '
           local key = ngx.var.model_name

           local redis = require "resty.redis"
           local red = redis:new()
           red:set_timeout(1000) -- 1 second
           local ok, err = red:connect("127.0.0.1", 6379)

           ngx.log(ngx.ERR, "test-----------", ngx.shared.path:get("path"))
           ngx.log(ngx.ERR, "model_name: ", key, ";  rest_path: ", ngx.var.rest_path)

           if not ok then
             ngx.log(ngx.ERR, "failed to connect to redis: ", err)
             return ngx.exit(500)
           end

           local host, err = red:get(key)
           -- local host, err = red:get("host")


           if not host then
             ngx.log(ngx.ERR, "failed to get redis key: ", err)
             return ngx.exit(500)
           end

           if host == ngx.null then
             ngx.log(ngx.ERR, "no host found for key ", key)
             return ngx.exit(400)
           end

           -- ngx.var.target = host .. "/" .. ngx.var.model_name .. ngx.var.rest_path
           -- if ngx.var.args then
           --   ngx.var.target = ngx.var.target .. "?" .. ngx.var.args
           -- end

           ngx.var.target = host .. ngx.var.request_uri

           ngx.log(ngx.ERR, "final_path: ", ngx.var.target)
         ';

        proxy_pass $target;

        #content_by_lua '
        #  ngx.say("Hello World")
        #';
    }
}